name: Testing Pipeline - ONFIT13

on:
    push:
        branches: [develop, main]
        paths: ["packages/**", "apps/**", "**/*.test.*", "**/*.spec.*"]
    pull_request:
        branches: [develop, main]
        paths: ["packages/**", "apps/**", "**/*.test.*", "**/*.spec.*"]
    workflow_dispatch:
        inputs:
            test_type:
                description: 'Type of tests to run'
                required: true
                default: 'all'
                type: choice
                options:
                    - all
                    - unit
                    - integration
                    - e2e
                    - coverage

jobs:
    test:
        name: Run Tests
        runs-on: macos-latest
        strategy:
            matrix:
                test-type: [unit, integration]

        steps:
            - name: 🏗 Setup repository
              uses: actions/checkout@v4

            - name: 🏗 Setup monorepo
              uses: ./.github/actions/setup-monorepo
              with:
                  node-version: 20.x

            - name: 🧪 Run Unit Tests
              if: ${{ matrix.test-type == 'unit' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' }}
              run: |
                  echo "🧪 Running unit tests..."
                  pnpm test:design
                  
            - name: 🧪 Run Integration Tests
              if: ${{ matrix.test-type == 'integration' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' }}
              run: |
                  echo "🔗 Running integration tests..."
                  pnpm test --filter web
                  pnpm test --filter native

            - name: 📊 Generate Coverage Report
              if: ${{ github.event.inputs.test_type == 'coverage' || github.event.inputs.test_type == 'all' }}
              run: |
                  echo "📊 Generating coverage report..."
                  pnpm test:design:coverage
                  
                  # Generate coverage summary
                  if [[ -f "packages/design-system/coverage/coverage-summary.json" ]]; then
                      echo "## 📊 Test Coverage Report" > coverage-report.md
                      echo "" >> coverage-report.md
                      
                      # Extract coverage data
                      COVERAGE=$(cat packages/design-system/coverage/coverage-summary.json | jq '.total')
                      LINES=$(echo "$COVERAGE" | jq '.lines.pct')
                      FUNCTIONS=$(echo "$COVERAGE" | jq '.functions.pct')
                      BRANCHES=$(echo "$COVERAGE" | jq '.branches.pct')
                      STATEMENTS=$(echo "$COVERAGE" | jq '.statements.pct')
                      
                      echo "| Metric | Coverage |" >> coverage-report.md
                      echo "|--------|----------|" >> coverage-report.md
                      echo "| **Lines** | $LINES% |" >> coverage-report.md
                      echo "| **Functions** | $FUNCTIONS% |" >> coverage-report.md
                      echo "| **Branches** | $BRANCHES% |" >> coverage-report.md
                      echo "| **Statements** | $STATEMENTS% |" >> coverage-report.md
                  fi

            - name: 📎 Upload Coverage Reports
              if: ${{ github.event.inputs.test_type == 'coverage' || github.event.inputs.test_type == 'all' }}
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report-${{ github.run_number }}
                  path: |
                      packages/design-system/coverage/
                      coverage-report.md
                  retention-days: 30

            - name: 📝 Comment Coverage on PR
              if: ${{ github.event_name == 'pull_request' && (github.event.inputs.test_type == 'coverage' || github.event.inputs.test_type == 'all') }}
              uses: actions/github-script@v7
              with:
                  script: |
                      const fs = require('fs');
                      if (fs.existsSync('coverage-report.md')) {
                          const report = fs.readFileSync('coverage-report.md', 'utf8');
                          
                          await github.rest.issues.createComment({
                              issue_number: context.issue.number,
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              body: `## 📊 Test Coverage Report\n\n${report}`
                          });
                      }

    e2e:
        name: End-to-End Tests
        runs-on: macos-latest
        if: ${{ github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == 'all' }}

        steps:
            - name: 🏗 Setup repository
              uses: actions/checkout@v4

            - name: 🏗 Setup monorepo
              uses: ./.github/actions/setup-monorepo
              with:
                  node-version: 20.x

            - name: 🚀 Start Web App
              run: |
                  echo "🚀 Starting web application..."
                  pnpm --filter web build
                  pnpm --filter web start &
                  sleep 10

            - name: 🧪 Run E2E Tests
              run: |
                  echo "🧪 Running end-to-end tests..."
                  # Add E2E test commands here
                  # pnpm test:e2e
                  echo "E2E tests would run here"

    performance:
        name: Performance Tests
        runs-on: macos-latest
        if: ${{ github.event.inputs.test_type == 'all' }}

        steps:
            - name: 🏗 Setup repository
              uses: actions/checkout@v4

            - name: 🏗 Setup monorepo
              uses: ./.github/actions/setup-monorepo
              with:
                  node-version: 20.x

            - name: 🏗 Build Applications
              run: |
                  echo "🏗 Building applications for performance testing..."
                  pnpm build

            - name: 📊 Performance Audit
              run: |
                  echo "📊 Running performance audit..."
                  
                  # Web performance
                  if [[ -d "apps/web/.next" ]]; then
                      echo "🌐 Web build size:"
                      du -sh apps/web/.next
                  fi
                  
                  # Native performance
                  if [[ -d "apps/native/android" ]]; then
                      echo "📱 Android build size:"
                      du -sh apps/native/android
                  fi
                  
                  if [[ -d "apps/native/ios" ]]; then
                      echo "🍎 iOS build size:"
                      du -sh apps/native/ios
                  fi
